from django.db import models
from django.contrib.auth.models import AbstractUser

# for creating a user --> built in user model
# from django.contrib.auth.models import User # no longer using this

# Create your models here.
# must be registered in admin.py as its customized
class User(AbstractUser): # now this user model will be used
    name = models.CharField(max_length=200, null=True)
    email = models.EmailField(null=True, unique=True)
    bio = models.TextField(null=True)

    # first tell where to upload the picture then
    # then render its url
    avatar = models.ImageField(null=True, default="avatar.svg") # this relies on a 3rd party package named pillow so pip install it or have it in requirements.txt
                                          # the abs relative path is given by 'MEDIA_ROOT' in settings.py   

    USERNAME_FIELD = 'email' # use field email to login and authenticate stuff
    REQUIRED_FIELDS = []

class Topic(models.Model):
    name = models.CharField(max_length=200)

    def __str__(self):
        return self.name


class Room(models.Model):
    host = models.ForeignKey(User, on_delete=models.SET_NULL, null=True) 
    topic =  models.ForeignKey(Topic, on_delete=models.SET_NULL, null=True) # dont delete the room if topic is deleted, having null=true for the case mentioned before
    name = models.CharField(max_length=200) 
    description = models.TextField(null=True, blank=True) # null=true it can be blank || blank is for the form to have it null while creating
    participants = models.ManyToManyField(User, related_name="participants", blank=True) # if blank == true check nothing in forms
    updated = models.DateTimeField(auto_now=True) # automatically add it whenevver invoked, gets updated everytime
    created = models.DateTimeField(auto_now_add=True) # only takes the timestamp when we create it, doesnt get updated everytime
    # id's are autogenerated

    class Meta:
        # defining ordering of rows
        ordering = ['-updated', '-created'] # updated and created, '-' is used to make descending else its in ascending order



    def __str__(self):
        return self.name


class Article(models.Model):
    author = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    title = models.CharField(max_length=255)
    content = models.TextField()
    created = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.title)
    

"""
many to many relationship between rooms and users
"""

# many to one multiple relationship wtih the upper one
class Message(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    room = models.ForeignKey(Room, on_delete=models.CASCADE) # if the room gets deleted all the children here gets deleted -> cascadedoes that
    body = models.TextField()
    updated = models.DateTimeField(auto_now=True) # automatically add it whenevver invoked, gets updated everytime
    created = models.DateTimeField(auto_now_add=True) # only takes the timestamp when we create it, doesnt get updated everytime

    class Meta:
        # defining ordering of rows
        ordering = ['-updated', '-created'] # updated and created, '-' is used to make descending else its in ascending order

    def __str__(self):
        return self.body[0:50] # preview is of the first 50 chars